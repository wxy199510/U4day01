<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="cn.kgc.demo.*"/>

    <!--读取数据库、db.properties配置-->
    <!--classpath: 文件的路径、文件的路径在根路径-->
    <!--classpath*: 文件的路径、文件的路径有子路径-->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:db.properties"></property>
    </bean>

    <!--数据源-->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--注入驱动-->
        <property name="driverClassName" value="${driver}"></property>
        <!--url-->
        <property name="url" value="${url}"></property>
        <!--用户名-->
        <property name="username" value="${username}"></property>
        <!--密码-->
        <property name="password" value="${password}"></property>

        <!-- 初始化大小、最小、最大 -->
        <property name="initialSize" value="1" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="20" />
        <!-- 获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />
        <!-- 间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
    </bean>

    <!--&lt;!&ndash;配置数据源&ndash;&gt;-->
    <!--<bean id="druidDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
        <!--&lt;!&ndash;注入驱动&ndash;&gt;-->
        <!--<property name="driverClass" value="${driver}"></property>-->
        <!--&lt;!&ndash;url&ndash;&gt;-->
        <!--<property name="jdbcUrl" value="${url}"></property>-->
        <!--&lt;!&ndash;用户名&ndash;&gt;-->
        <!--<property name="user" value="${username}"></property>-->
        <!--&lt;!&ndash;密码&ndash;&gt;-->
        <!--<property name="password" value="${password}"></property>-->
    <!--</bean>-->

    <!--SqlSessionFactory创建、且为单例模式、使用spring框架去管理-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--注入mybatis的文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--注入mybatis的别名配置-->
        <property name="typeAliasesPackage" value="cn.kgc.demo.pojo"/>
        <!--扫描到resources/mapper下面的所有mapper.xml文件-->
        <property name="mapperLocations" value="mapper/*.xml"/>
    </bean>

    <!--Mapper动态代理对象（用匿名bean）-->
    <!--通过此工具类、将Mapper动态代理对象实例化、并放入到IOC容器中进行管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--依赖引入sqlSessionFactory对象-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--配置扫描到mapper接口包下面所有的Mapper文件-->
        <property name="basePackage" value="cn.kgc.demo.dao"/>
    </bean>

    <!--配置事务管理器-->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="druidDataSource"/>
    </bean>

    <!--开启声明式事务的注解驱动-->
    <tx:annotation-driven proxy-target-class="true" transaction-manager="tx"/>

    <!--xml版的事务的传播行为的配置-->
    <!--
        transaction-manager="tx": 关联到事务管理配置
    -->
    <!--<tx:advice id="advice" transaction-manager="tx">
        <tx:attributes>
            &lt;!&ndash;配置传播行为 ： CRUD&ndash;&gt;
            &lt;!&ndash;
                比如：凡是以del开头的切入点的方法，都使用REQUIRED传播行为、
            &ndash;&gt;
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    &lt;!&ndash;aop的xml配置&ndash;&gt;
    <aop:config proxy-target-class="true">
        &lt;!&ndash;配置切入点&ndash;&gt;
        &lt;!&ndash;advice-ref="advice": 对应的事务传播行为&ndash;&gt;
        <aop:advisor advice-ref="advice" pointcut="execution(* cn.kgc.demo.service.impl.DemoServiceImpl.*(..))"/>
    </aop:config>-->


</beans>
